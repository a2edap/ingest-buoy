
storage:

  # This section should not be modified unless there is a strong need. Please contact
  # the repository maintainers if you feel you need to use different settings here –
  # there may be another way to accomplish what you need.
  classname:  ${STORAGE_CLASSNAME}
  parameters:
    retain_input_files: ${RETAIN_INPUT_FILES}
    root_dir: ${ROOT_DIR}
    bucket_name: ${STORAGE_BUCKET}

  file_handlers:

    input:
    {% if cookiecutter.use_custom_filehandler not in ["n", "N", "no", "No"] %}
      # TODO – Developer: Update the FileHandler here as needed
      my_custom_format:           # Solely used as a label. See the 'csv' input
                                  # filehandler below 
        file_pattern: '.*'        # The regex pattern used to match to an input file.
                                  # Note this will only be applied to files already
                                  # matched by a mapping in mapping.py, so .* is fine
                                  # unless you need to use multiple handlers within
                                  # those matched files.
        classname: ingest.{{ cookiecutter.ingest_slug }}.pipeline.filehandler.CustomFileHandler
      
      # TODO – Developer: Delete this if you don't want to use the CsvHandler
      # You can also use built-in tsdat FileHandlers, which support a number of custom
      # parameters: https://tsdat.rtfd.io/en/latest/autoapi/tsdat/io/filehandlers/
      # csv:
      #   file_pattern: '.*\.csv'                       # Matches files ending in '.csv'
      #   classname: tsdat.io.filehandlers.CsvHandler   # FileHandler module to use
      #   parameters:
      #     read:
      #       read_csv:
      #         # Parameters here will be passed to pd.read_csv() as kwargs
    {% else %}# TODO – Developer: Update the csv handler as needed
      csv:
        file_pattern: '.*\.csv'                       # Matches files ending in '.csv'
        classname: tsdat.io.filehandlers.CsvHandler   # FileHandler module to use
        parameters:     # Parameters to pass to CsvHandler. Comment out if not using.
          read:
            # You can add parameters that are passed to pandas.read_csv() as kwargs:
            read_csv:
              index_col: False      # Treat the first column (time) as a data variable
              header: 2             # Where to look for the header (header line number - 1) 

    {% endif %}
    # The output section should not be modified unless there is a strong need. Please
    # contact the repository maintainers if you feel you need to write to a different
    # format.
    output:
      netcdf:
        file_extension: '.nc'
        classname: tsdat.io.filehandlers.NetCdfHandler
